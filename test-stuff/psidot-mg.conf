extern double w[3];
extern double gamm[3][3];
extern double lambda;
extern double Dr;
extern double kappa;

void compute_psidot_mg(COMPLEX* psidot, COMPLEX* psi) {
  double mod_gamm[3][3], a4[3][3][3][3], a42[9][9];
  int i1,i2,i3,i4,i5;
  double eval[9], evec[9][9];

  tensor4(psi,a4);
  for (i1=0;i1<3;i1++) for (i2=0;i2<3;i2++) for (i3=0;i3<3;i3++) for (i4=0;i4<3;i4++)
    a42[3*i1+i2][3*i3+i4] = a4[i1][i2][i3][i4];
  diagonalize_sym(9,a42,eval,evec);

  for (i1=0;i1<3;i1++) for (i2=0;i2<3;i2++) for (i3=0;i3<3;i3++) for (i4=0;i4<3;i4++) {
    a4[i1][i2][i3][i4] = 0;
    for (i5=0;i5<9;i5++)
      a4[i1][i2][i3][i4] += (1+kappa*eval[i5])*evec[i5][i1*3+i2]*evec[i5][i3*3+i4];
  }

  for (i1=0;i1<3;i1++) for (i2=0;i2<3;i2++) {
    mod_gamm[i1][i2] = 0;
    for (i3=0;i3<3;i3++) for (i4=0;i4<3;i4++) {
      mod_gamm[i1][i2] += a4[i1][i2][i3][i4]*gamm[i3][i4];
    }
  }

  @spherical_iterate {
/* Jeffery's Equation */
    psidot[@index] += w[0]*@method(psi,0.5*y*dz-0.5*z*dy);
    psidot[@index] += w[1]*@method(psi,0.5*z*dx-0.5*x*dz);
    psidot[@index] += w[2]*@method(psi,0.5*x*dy-0.5*y*dx);
    psidot[@index] += lambda*mod_gamm[0][0]*@method(psi,0.5*x*dx);
    psidot[@index] += lambda*mod_gamm[0][1]*@method(psi,0.5*x*dy+0.5*y*dx);
    psidot[@index] += lambda*mod_gamm[0][2]*@method(psi,0.5*x*dz+0.5*z*dx);
    psidot[@index] += lambda*mod_gamm[1][1]*@method(psi,0.5*y*dy);
    psidot[@index] += lambda*mod_gamm[1][2]*@method(psi,0.5*y*dz+0.5*z*dy);
    psidot[@index] += lambda*mod_gamm[2][2]*@method(psi,0.5*z*dz);
/* Folgar-Tucker correction */
    psidot[@index] += Dr*@method(psi,dx*dx+dy*dy+dz*dz);
  }
}
