extern double gamm[3][3];
extern double normgamma;
extern double C1, C2, C3;

void compute_psidot_koch(COMPLEX* psidot, COMPLEX* psi) {
  double a4[3][3][3][3], a6[3][3][3][3][3][3];
  int i1,i2,i3,i4,i5,i6;
  double D1, D2[3][3];

  tensor4(psi,a4);
  tensor6(psi,a6);
  D1 = 0;
  for (i1=0;i1<3;i1++) for (i2=0;i2<3;i2++)
    for (i3=0;i3<3;i3++) for (i4=0;i4<3;i4++)
      D1 += a4[i1][i2][i3][i4]*gamm[i1][i2]*gamm[i3][i4]/normgamma;
  for (i1=0;i1<3;i1++) for (i2=0;i2<3;i2++) {
    D2[i1][i2] = 0;
    for (i3=0;i3<3;i3++) for (i4=0;i4<3;i4++)
      for (i5=0;i5<3;i5++) for (i6=0;i6<3;i6++)
        D2[i1][i2] += a6[i1][i2][i3][i4][i5][i6]*gamm[i3][i4]*gamm[i5][i6]/normgamma;
  }


  @spherical_iterate {
    if (C1!=0)
      psidot[@index] += C1*D1*@method(psi,dx*dx+dy*dy+dz*dz);
    if (C2!=0)
      psidot[@index] += C2*(D2[0][0]*@method(psi,(dx-2*x)*dx)
                            + D2[0][1]*@method(psi,(dx-2*x)*dy+(dy-2*y)*dx)
                            + D2[0][2]*@method(psi,(dx-2*x)*dz+(dz-2*z)*dx)
                            + D2[1][1]*@method(psi,(dy-2*y)*dy)
                            + D2[1][2]*@method(psi,(dy-2*y)*dz+(dz-2*z)*dy)
                            + D2[2][2]*@method(psi,(dz-2*z)*dz));
    if (C3!=0)
      psidot[@index] -= C3*(D2[0][0]*@method(psi,lx*lx)
                            + D2[0][1]*@method(psi,lx*ly+ly*lx)
                            + D2[0][2]*@method(psi,lx*lz+lz*lx)
                            + D2[1][1]*@method(psi,ly*ly)
                            + D2[1][2]*@method(psi,ly*lz+lz*ly)
                            + D2[2][2]*@method(psi,lz*lz));
  }

  /* sanity check */

  printf("C1=%20.15g;C2=%20.15g;C3=%20.15g;\n",C1,C2,C3);
  printf("D1=%20.15g;\n",D1);
  printf("D2={");
  for (i1=0;i1<3;i1++) {
    printf("{");
    for(i2=0;i2<3;i2++)
      printf("%20.15g%s",D2[i1][i2],i2==2?"}":",");
    printf("%s",i1==2?"};\n":",");
  }
  double a2[3][3];
  tensor2(psi,a2);
  printf("a2={");
  for (i1=0;i1<3;i1++) {
    printf("{");
    for(i2=0;i2<3;i2++)
      printf("%20.15g%s",a2[i1][i2],i2==2?"}":",");
    printf("%s",i1==2?"};\n":",");
  }
  printf("a4={");
  for (i1=0;i1<3;i1++) {
    printf("{");
    for (i2=0;i2<3;i2++) {
      printf("{");
      for (i3=0;i3<3;i3++) {
        printf("{");
        for(i4=0;i4<3;i4++)
          printf("%20.15g%s",a4[i1][i2][i3][i4],i4==2?"}":",");
        printf("%s",i3==2?"}":",");
      }
      printf("%s",i2==2?"}":",");
    }
    printf("%s",i1==2?"};\n":",");
  }
  COMPLEX *temppsidot = malloc(sizeof(COMPLEX)*length);
  @spherical_iterate {
    if (C1!=0)
      temppsidot[@index] = C1*D1*@method(psi,dx*dx+dy*dy+dz*dz);
    else
      psidot[@index] = 0;
    if (C2!=0)
      temppsidot[@index] += C2*(D2[0][0]*@method(psi,(dx-2*x)*dx)
                            + D2[0][1]*@method(psi,(dx-2*x)*dy+(dy-2*y)*dx)
                            + D2[0][2]*@method(psi,(dx-2*x)*dz+(dz-2*z)*dx)
                            + D2[1][1]*@method(psi,(dy-2*y)*dy)
                            + D2[1][2]*@method(psi,(dy-2*y)*dz+(dz-2*z)*dy)
                            + D2[2][2]*@method(psi,(dz-2*z)*dz));
    if (C3!=0)
      temppsidot[@index] -= C3*(D2[0][0]*@method(psi,lx*lx)
                            + D2[0][1]*@method(psi,lx*ly+ly*lx)
                            + D2[0][2]*@method(psi,lx*lz+lz*lx)
                            + D2[1][1]*@method(psi,ly*ly)
                            + D2[1][2]*@method(psi,ly*lz+lz*ly)
                            + D2[2][2]*@method(psi,lz*lz));
  }
  tensor2(temppsidot,a2);
  printf("adot2={");
  for (i1=0;i1<3;i1++) {
    printf("{");
    for(i2=0;i2<3;i2++)
      printf("%20.15g%s",a2[i1][i2],i2==2?"}":",");
    printf("%s",i1==2?"};\n":",");
  }
  free(temppsidot);
}
